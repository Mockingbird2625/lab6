library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args()
args(list.files)
list.files <- old.dir
old.dir <- list.files
old.dir <- getwd()
dir.create()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R")
file.rename("mytest.R" to "mytest2.R" )
file.rename("mytest.R to mytest2.R" )
file.rename("mytest.R" to mytest2.R" )
file.rename("mytest.R" to  )
file.rename("mytest.R") to ("mytest2.R" )
file.rename("mytest.R" to "mytest2.R" )
?file.rename
file.rename(from = "mytest.R" to "mytest2.R")
file.rename(from = "mytest.R" to = "mytest2.R")
file.rename(from = "mytest" to )
file.rename("mytest.R", to "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
1
file.path("folder1", "folder2")
?dir.create
dircrate("testdir2") file.path("testdir3")
1
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd(old.dir)
libray(swirl)
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Anatoliy")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
1
e(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <-  c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- my_data is.na()
1
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
1
c(3, 5, 7)
x <- c(3, 5, 7)
[c(3, 5, 7)]
x <- [c(3, 5, 7)]
c[3, 5, 7]
x <- c[3, 5, 7]
info()
1
c[(3, 5, 7)]
[c(3, 5, 7)]
c(3, 5, 7),[]
x <- [c(3, 5, 7)]
x <- c(3, 5, 7)
x <- c(3, 5, 7)
x <- c[3, 5, 7]
x <- c[(3, 5, 7)]
c[(3, 5, 7)]
[c(3, 5, 7)]
c(x[3], x[5], x[7])
c(x[3], x[5], x[7])
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x (i.e. x[0])?
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)?
1
dim(my_vector)?
20
dim(20)?
1
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
matrix()?
1
?matrix()
?matrix
1
my_matrix2 <- matrix(1:20, 4row, 5col)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients >- c("Bill", "Gina", "Kelly",  "Sean")
patients <- c("Bill", "Gina", "Kelly",  "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
bye()
library(swirl)
rm(list=ls())
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit(
43
334
4
5
8
end
bye
bye
library(swirl)
rm(list=ls())
swirl()
submit()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
new_evaluete(c(1.4, 3.6, 7.9, 8.8))
new_evaluate(c(1.4, 3.6, 7.9, 8.8))
new evaluate(c(1.4, 3.6, 7.9, 8.8))
new evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, {c(8, 4, 0)})
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
SUBMIT()
submit()
submit()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
play()
nxt()
submit()
submit()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
submit()
submit()
"I" %p% "love" %p% "R!"
bye()
submit()
q()
quit(save = "default", status = 0, runLast = TRUE)
library(swirl)
swirl()
# 1. Об'єднувати дані про тренування і тестування для утворення одного набору даних.
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
x <- rbind(x_train, x_test)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
y <- rbind(y_train, y_test)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
subject <- rbind(subject_train, subject_test)
# 2. Витягувати тільки вимірювання математичного очікування та дисперсії для кожного вимірювання.
features <- read.table("UCI HAR Dataset/features.txt")
indices <- grep("mean()|std()", features[, 2])
x <- x[, indices]
# 3. Використовувати назви активностей для назв діяльності в наборі даних.
activity <- read.table("UCI HAR Dataset/activity_labels.txt")
y[,1] <- activity[y[, 1], 2]
# 4.  Надавати назви даним іменами, які описують суть змінних.
names(x) <- features[indices, 2]
names(y) <- "activity"
names(subject) <- "subject"
result <- cbind(subject, y, x)
# 5. З даних пункту 4 необхідно створити інший незалежний набір даних
# з середнім значенням по кожній змінній за кожним видом діяльності
# і по кожному предмету.
subject_len <- length(table(subject))
activity_len <- length(activity[, 1])
cols <- dim(result)[2]
result_avg <- result[1:(subject_len*activity_len), ]
row <- 1
for(i in 1:subject_len) {
for(j in 1:activity_len) {
result_avg[row, 1] <- unique(subject)[, 1][i]
result_avg[row, 2] <- activity[j, 2]
tmp <- result[result$subject == i & result$activity == activity[j, 2], ]
result_avg[row, 3:cols] <- colMeans(tmp[, 3:cols])
row <- row + 1
}
}
# 1. Об'єднувати дані про тренування і тестування для утворення одного набору даних.
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
x <- rbind(x_train, x_test)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
y <- rbind(y_train, y_test)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
subject <- rbind(subject_train, subject_test)
# 2. Витягувати тільки вимірювання математичного очікування та дисперсії для кожного вимірювання.
features <- read.table("UCI HAR Dataset/features.txt")
indices <- grep("mean()|std()", features[, 2])
x <- x[, indices]
# 3. Використовувати назви активностей для назв діяльності в наборі даних.
activity <- read.table("UCI HAR Dataset/activity_labels.txt")
y[,1] <- activity[y[, 1], 2]
# 4.  Надавати назви даним іменами, які описують суть змінних.
names(x) <- features[indices, 2]
names(y) <- "activity"
names(subject) <- "subject"
result <- cbind(subject, y, x)
# 5. З даних пункту 4 необхідно створити інший незалежний набір даних
# з середнім значенням по кожній змінній за кожним видом діяльності
# і по кожному предмету.
subject_len <- length(table(subject))
activity_len <- length(activity[, 1])
cols <- dim(result)[2]
result_avg <- result[1:(subject_len*activity_len), ]
row <- 1
for(i in 1:subject_len) {
for(j in 1:activity_len) {
result_avg[row, 1] <- unique(subject)[, 1][i]
result_avg[row, 2] <- activity[j, 2]
tmp <- result[result$subject == i & result$activity == activity[j, 2], ]
result_avg[row, 3:cols] <- colMeans(tmp[, 3:cols])
row <- row + 1
}
}
library(swirl)
rm(list=ls())
swirl()
bye()
library(swirl)
install_from_swirl("Exploaratory Data Ayalysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
library(swirl)
swirl()
swirl()
rm(list=ls())
library(swirl)
swirl()
library(swirl)
rm(list=ls())
swirl()
library(swirl)
swirl()
setwd("C//lab6")
getwd()
setwd("C://lab6")
getwd()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='moroid',
token='2B0F07ECD95A1ADFA32C9779D8A8E34B',
secret='yYdWLUzAArarGP4B+M7b/KpzD3AZxQWV90PcSd88')
library(rsconnect)
rsconnect::deployApp('C://lab6')
rsconnect::deployApp('C://lab6/quadratic')
